#!/usr/bin/env python

from subprocess import Popen, PIPE, check_output, check_call
from collections import OrderedDict
from pathlib import Path
import os
import io
import yaml
from PIL import Image
from mutagen.mp3 import MP3
from mutagen.flac import FLAC
from mutagen.id3 import ID3, APIC
from mutagen.mp4 import MP4

def stdout_control(cmd):
    output = Popen(cmd,shell=True, stdout=PIPE).communicate()[0]
    return output.decode().strip()


def config_parser():
    """ """
    myconfig = Path("~/.config/rofinyx/config.yaml").expanduser()
    data = ""
    if os.path.isfile(myconfig):
        with open(myconfig, 'r', encoding="utf-8") as file:
            data = yaml.safe_load(file)
    
    stats = stdout_control("mpc | tail -n 1").split(":")
    stats = [x.split(" ")[1] for x in stats[2:]]
    
    # repeat-0, random-1 , single-2 , consume-3

    mpc_actions  = {

      "Play/Pause": ("mpc toggle",),
      "Next": ("mpc next",),
      "Prev": ("mpc prev",),
      "repeat":("mpc repeat",stats[0]),
      "Random": ("mpc random",stats[1]),
      "single":("mpc single",stats[2]),
      "consume":("mpc consume",stats[3])

            }
   



    parsed_config = data 
    mode_status = parsed_config['show_mode_status']
    menu_commands = parsed_config['commands'] 
    
    rofi_config = ""
    rofi_config_file = parsed_config['rofi-config']
    if rofi_config_file != "default":
        rofi_config = Path(rofi_config_file).expanduser()
        rofi_config = f"-theme {rofi_config}"

    is_seamless = parsed_config["seamless_menu"]
    is_draw_album_cover = parsed_config["draw_album_cover"]
    music_dir=parsed_config.get("music_dir", "~/Music/") 




    cover_output_path = ""
    if is_draw_album_cover:
        cover_output_path = parsed_config["album_cover_output"]



    menu = OrderedDict()
    menu["Tracks"] = ""
   



    for item in menu_commands:
        if len(mpc_actions[item]) == 1:
            menu[item] = mpc_actions[item][0]
        else:
            if mode_status == True:
                menu[f"{item}   ({mpc_actions[item][1]})"] = mpc_actions[item][0] 
            else:
                menu[item] = mpc_actions[item][0]
    
    if parsed_config["show_volumes"]:
        vols = parsed_config["volumes"]
        for vol in vols:
            menu[f"volume {str(vol)}"] = f"mpc volume {str(vol)}"


    return ( rofi_config, dict(menu), is_seamless, is_draw_album_cover, music_dir ,cover_output_path)









class RofiInterface:
    """ """
    def __init__(self, rofi_config, menu_actions, seamlessness, is_draw_album_cover, music_dir ,cover_output_path="" ,on_repeat=False, ): #on_repeat basically means if it's on seemless repetition or not.
        
        if is_draw_album_cover:
            if not on_repeat:
                print(cover_output_path)
                try:
                    current_file_name = self.stdout_control("mpc current -f %file%")
                    music_dir = Path(music_dir).expanduser()
                    self.extract_and_save_album_cover(str(music_dir)+"/"+current_file_name,Path(cover_output_path).expanduser())
                except Exception as e:
                    print(e)

        # self.theme = f"-theme {rofi_config}"
        self.theme = rofi_config
        self.current = "Playing: " + self.stdout_control("mpc current")
        self.actions = menu_actions 
        self.is_seamless = seamlessness 
        
    def extract_and_save_album_cover(self,file_path, output_path):
        """ """
        album_cover_data = None

        if file_path.lower().endswith(".mp3"):
            audio = MP3(file_path, ID3=ID3)
            if audio.tags is None:
                raise ValueError("No ID3 tags found in the MP3 file.")
            for tag in audio.tags.values():
                if isinstance(tag, APIC):
                    album_cover_data = tag.data
                    break

        # Extract album cover from FLAC files
        elif file_path.lower().endswith(".flac"):
            audio = FLAC(file_path)
            if len(audio.pictures) > 0:
                album_cover_data = audio.pictures[0].data
            else:
                raise ValueError("No album cover found in the FLAC file.")

        elif file_path.lower().endswith(".m4a"):
            audio = MP4(file_path)
            if "covr" in audio:
                album_cover_data = audio["covr"][0]
            else:
                raise ValueError("No album cover found in the M4A file.")
        
        else:
            print(file_path.lower())
            # raise ValueError("Unsupported file format. Only MP3, FLAC, and M4A are supported.")

        if album_cover_data:
            image = Image.open(io.BytesIO(album_cover_data))
            image.save(output_path)
            print(f"Album cover saved as {output_path}.")
        else:
            print("No album cover found in the file.")


    def stdout_control(self,cmd):
        output = Popen(cmd,shell=True, stdout=PIPE).communicate()[0]
        return output.decode().strip()

    def main_menu(self):
        """ """
        
        keys_parsed = list(self.actions.keys())
        commands_list = "|".join(keys_parsed)
        rofi_menuer = f"echo '{commands_list}' | rofi {self.theme} -sep '|' -mesg '{ self.current }' -i -dmenu -p MPC "

        rofi = self.stdout_control(rofi_menuer)

        return rofi

    def trimenu(self):
        """ """
        
        playlists = self.stdout_control("mpc lsplaylists").replace("\n","|")
        print(playlists)
        rofi_menuer = f"echo 'local|{playlists}' | rofi {self.theme} -sep '|' -mesg '{ self.current }' -i -dmenu -p MPC "
        rofi = self.stdout_control(rofi_menuer)
        
        


        if rofi == "local":
            main_list = self.stdout_control("mpc listall").split("\n")
            songs_string = ""
            for m in main_list:
                songs_string = songs_string + f" '{m}' "
            self.stdout_control(f"mpc clear; mpc add {songs_string} ; mpc play ")
        else:
            self.stdout_control(f"mpc clear; mpc load '{rofi}'; mpc play")
        self.submenu() 


    def submenu(self):
        """ """
        titles = check_output("mpc playlist",shell=True).decode()    
        track_list = [x for x in titles.split("\n")][:-1]
        tracks = "|".join(track_list)
        tracks_dict = { track_list[i]:i+1 for i in range(len(track_list)) }

        if len(track_list) > 1:
            all_tracks = "SOURCES|" + tracks 
            # print(theme)
            rofi_menuer = f"echo '{all_tracks}' | rofi {self.theme} -sep '|' -selected-row 1 -mesg '{ self.current }' -i -dmenu -p tracks "
            rofi = self.stdout_control(rofi_menuer)
            
            if rofi == "SOURCES":
                self.trimenu()
            else:
                self.stdout_control(f"mpc play {tracks_dict[rofi]}")

        else:
            rofi_menuer = f"echo 'Playlist Empty: Return To Sources' | rofi {self.theme} -sep '|' -selected-row 0 -mesg '{ self.current }' -i -dmenu -p tracks "
            rofi = self.stdout_control(rofi_menuer)
            if rofi == "Playlist Empty: Return To Sources":
                self.trimenu()



    def run(self):
        """ """
        rofi = self.main_menu()
        if rofi == "Tracks":
            self.submenu()
        else:
            try:
                check_call(self.actions[rofi], shell=True)
                if self.is_seamless:
                    configurations = config_parser()
                    mpc_controller = RofiInterface(configurations[0],configurations[1],configurations[2], configurations[3],configurations[4], configurations[5] ,on_repeat=True)
                    mpc_controller.run()
            except Exception as e:
                print("Exited:",e)



if __name__ == "__main__":
    configurations = config_parser()
    mpc_controller = RofiInterface(configurations[0],configurations[1],configurations[2],configurations[3],configurations[4], configurations[5])
    mpc_controller.run()


